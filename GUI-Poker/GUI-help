from distutils.sysconfig import get_makefile_filename
from tkinter import *
import os
 
# Designing window for registration
 
def register():
    global register_screen
    register_screen = Toplevel(main_screen)
    register_screen.title("Register")
    register_screen.geometry("300x250")
 
    global username
    global password
    global Gmail
    global username_entry
    global password_entry
    global Gmail_entry
    username = StringVar()
    password = StringVar()
    Gmail = StringVar()
 
    Label(register_screen, text="Please enter details below", bg="white").pack()
    Label(register_screen, text="").pack()
    username_lable = Label(register_screen, text="Username * ")
    username_lable.pack()
    username_entry = Entry(register_screen, textvariable=username)
    username_entry.pack()
    Gmail_lable = Label(register_screen, text="Gmail * ")
    Gmail_lable.pack()
    Gmail_entry = Entry(register_screen, textvariable=Gmail)
    Gmail_entry.pack()
    password_lable = Label(register_screen, text="Password * ")
    password_lable.pack()
    password_entry = Entry(register_screen, textvariable=password, show='*')
    password_entry.pack()
    Label(register_screen, text="").pack()
    Button(register_screen, text="Register", width=10, height=1, bg="white", command = register_user).pack()
 
 
# Designing window for login 
def login():
    global login_screen
    login_screen = Toplevel(main_screen)
    login_screen.title("Login")
    login_screen.geometry("300x250")
    Label(login_screen, text="Please enter details below to login").pack()
    Label(login_screen, text="").pack()
 
    global username_verify
    global password_verify
 
    username_verify = StringVar()
    password_verify = StringVar()
 
    global username_login_entry
    global password_login_entry
 
    Label(login_screen, text="Username * ").pack()
    username_login_entry = Entry(login_screen, textvariable=username_verify)
    username_login_entry.pack()
    Label(login_screen, text="").pack()
    Label(login_screen, text="Password * ").pack()
    password_login_entry = Entry(login_screen, textvariable=password_verify, show= '*')
    password_login_entry.pack()
    Label(login_screen, text="").pack()
    Button(login_screen, text="Login", width=10, height=1, command = login_verify).pack()

# Implementing event on register button
 
def register_user():
 
    username_info = username.get()
    password_info = password.get()
    Gmail_info = Gmail.get()
 
    file = open(username_info, "w")
    file.write(username_info + "\n")
    file.write(password_info)
    file.close()
 
    username_entry.delete(0, END)
    Gmail_entry.delete(0, END)
    password_entry.delete(0, END)
 
    Label(register_screen, text="Registration Success", fg="green", font=("calibri", 11)).pack()
 
# Implementing event on login button 

def login_verify():
    username1 = username_verify.get()
    password1 = password_verify.get()
    username_login_entry.delete(0, END)
    password_login_entry.delete(0, END)
 
    list_of_files = os.listdir()
    if username1 in list_of_files:
        file1 = open(username1, "r")
        verify = file1.read().splitlines()
        if password1 in verify:
            login_sucess()
 
        else:
            password_not_recognised()
 
    else:
        user_not_found()
 
# Designing popup for login success
 
def login_sucess():
    global login_success_screen
    login_success_screen = Toplevel(login_screen)
    login_success_screen.title("Success")
    login_success_screen.geometry("150x100")
    Label(login_success_screen, text="Login Success").pack()
    Button(login_success_screen, text="OK", command=delete_login_success).pack()
 
# Designing popup for login invalid password
 
def password_not_recognised():
    global password_not_recog_screen
    password_not_recog_screen = Toplevel(login_screen)
    password_not_recog_screen.title("Success")
    password_not_recog_screen.geometry("150x100")
    Label(password_not_recog_screen, text="Invalid Password ").pack()
    Button(password_not_recog_screen, text="OK", command=delete_password_not_recognised).pack()
 
# Designing popup for user not found
 
def user_not_found():
    global user_not_found_screen
    user_not_found_screen = Toplevel(login_screen)
    user_not_found_screen.title("Success")
    user_not_found_screen.geometry("150x100")
    Label(user_not_found_screen, text="User Not Found").pack()
    Button(user_not_found_screen, text="OK", command=delete_user_not_found_screen).pack()
 
# Deleting popups
 
def delete_login_success():
    login_success_screen.destroy()
 
 
def delete_password_not_recognised():
    password_not_recog_screen.destroy()
 
 
def delete_user_not_found_screen():
    user_not_found_screen.destroy()

 
# Designing Main(first) window
def help_screen():
        """
        Displaying all the possible commands of the game
        """
        help_window = Tk()
        help_window.title("Help Screen")

        new_game_lbl = Label(help_window, text = "new_game - This is used to start a new game")
        new_game_lbl.grid(column = 10, row = 10)

        new_game_lbl = Label(help_window, text = "Login - Login if you are previously register to the game")
        new_game_lbl.grid(column = 10, row = 20)

        new_game_lbl = Label(help_window, text = "Registered - Register if you are new for this game")
        new_game_lbl.grid(column = 10, row = 30)

        EOF_lbl = Label(help_window, text = "Exit - Exit from the game")
        EOF_lbl.grid(column = 10, row = 40)
        
        add_player_lbl = Label(help_window, text = "add_player - Click add player to add new player to the game")
        add_player_lbl.grid(column = 10, row = 50)
        
        current_issue_lbl = Label(help_window, text = "Vote_issue - To vote an issue or to raise an issue")
        current_issue_lbl.grid(column = 10, row = 60)

        next_issue_lbl = Label(help_window, text = "next_issue - This is used to go to the next issue")
        next_issue_lbl.grid(column = 10, row = 70)

        previous_issue_lbl = Label(help_window, text = "previous_issue - This is used to go to the previous issue")
        previous_issue_lbl.grid(column = 10, row = 80)

        remove_player_lbl = Label(help_window, text = "remove_player - This is used to remove a player")
        remove_player_lbl.grid(column = 10, row = 90)

        reset_votes_lbl = Label(help_window, text = "reset_votes - This is used to reset the votes of an issue")
        reset_votes_lbl.grid(column = 10, row = 100)

        show_report_lbl = Label(help_window, text = "show_report - This is used to show the voting report")
        show_report_lbl.grid(column = 10, row = 110)
        
        user_count_lbl = Label(help_window, text = "user_count - This is used to show the number of players in the game")
        user_count_lbl.grid(column = 10, row = 120)

        vote_issue_lbl = Label(help_window, text = "vote_issue - This is used to cast a vote to an issue")
        vote_issue_lbl.grid(column = 10, row = 130)

        voting_system_lbl = Label(help_window, text = "voting_system - This is used to view the voting system of the game")
        voting_system_lbl.grid(column = 10, row = 140)
        help_window.mainloop()
 
def main_account_screen():
    global main_screen
    main_screen = Tk()
    main_screen.geometry("500x400")
    main_screen.title("Planning Poker")
    Label(text="Delta Poker", bg="white", width="300", height="2", font=("Calibri", 13)).pack()
    Label(text="").pack()
    img=PhotoImage(file='logo2.png')
    Label(main_screen,image=img). pack()
    Button(text="Login", height="2", width="30", command=login).pack()
    Label(text="").pack()
    Button(text="Register", height="2", width="30", command=register).pack()
    Label(text="").pack()    
    Button(text="HELP", height="2", width="30", command=help_screen).pack()
    Label(text="").pack()
    exit_button = Button(main_screen, text="Exit", command=main_screen.destroy)
    exit_button.pack(pady=20)
    main_screen.mainloop()
 
 
main_account_screen()
